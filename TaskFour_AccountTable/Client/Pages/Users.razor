@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json;
@using System.Text;
@using TaskFour_AccountTable.Client.Services.Interfaces;
@using TaskFour_AccountTable.Shared.UserDisplayModel;
@attribute [Authorize]
@inject IAccountService AccountService

<PageTitle>Users</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large">
    <h1>Users</h1>
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudButton OnClick="@BlockSelected" Variant="Variant.Text" Color="Color.Dark">Block</MudButton>
            <MudIconButton OnClick="@UnblockSelected" Icon="@Icons.Material.Filled.LockReset" Color="Color.Dark" />
            <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline" Color="Color.Dark" />
        </MudToolBar>
    </MudPaper>
    <MudTable T="UserViewModel" Loading="@isTableLoading" Items="@users" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Bordered="true" Striped="true"
              @bind-SelectOnRowClick="@_selectOnRowClick">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Last login</MudTh>
            <MudTh>Registration date</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Last login">@context.LastLogin</MudTd>
            <MudTd DataLabel="Registration date">@context.RegistrationDate</MudTd>
            <MudTd DataLabel="Status">@(context.IsBlocked ? "Blocked" : "Active")</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
            </PagerContent>
            <FooterContent>
            </FooterContent>
        </MudTable>
    </MudContainer>


    @code {

    private List<UserViewModel> users = new();
    private HashSet<UserViewModel> selectedItems = new();
    private bool _selectOnRowClick = true;
    private bool isTableLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isTableLoading = true;
            users = await AccountService.GetAllUsers();
            isTableLoading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task BlockSelected()
    {
        isTableLoading = true;
        await AccountService.SetBlock(selectedItems);
        isTableLoading = false;
    }
    protected async Task UnblockSelected()
    {
        isTableLoading = true;
        await AccountService.SetBlock(selectedItems, false);
        isTableLoading = false;
    }


}
