@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json;
@using System.Text;
@using System.Security.Claims;
@using TaskFour_AccountTable.Client.Services.Interfaces;
@using TaskFour_AccountTable.Shared.UserDisplayModel;
@attribute [Authorize]
@inject IAccountService AccountService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <PageTitle>Users</PageTitle>
        <MudContainer MaxWidth="MaxWidth.Large">
            <h1>Users</h1>
            <MudPaper Elevation="25">
                <MudToolBar>
                    <MudButton OnClick="@BlockSelected" Variant="Variant.Text" Color="Color.Dark">Block</MudButton>
                    <MudIconButton OnClick="@UnblockSelected" Icon="@Icons.Material.Filled.LockReset" Color="Color.Dark" />
                    <MudIconButton OnClick="@DeleteSelected" Icon="@Icons.Material.Filled.DeleteOutline" Color="Color.Dark" />
                </MudToolBar>
            </MudPaper>
            <MudTable T="UserViewModel" Loading="@isTableLoading" Items="@users" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Bordered="true" Striped="true"
                      @bind-SelectOnRowClick="@_selectOnRowClick">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Last login</MudTh>
                    <MudTh>Registration date</MudTh>
                    <MudTh>Status</MudTh>
                </HeaderContent>
                <RowTemplate Context="user">
                    <MudTd DataLabel="Id">@user.Id</MudTd>
                    <MudTd DataLabel="Name">@user.Name</MudTd>
                    <MudTd DataLabel="Email">@user.Email</MudTd>
                    <MudTd DataLabel="Last login">@user.LastLogin</MudTd>
                    <MudTd DataLabel="Registration date">@user.RegistrationDate</MudTd>
                    <MudTd DataLabel="Status">@(user.IsBlocked ? "Blocked" : "Active")</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
                    </PagerContent>
                    <FooterContent>
                    </FooterContent>
                </MudTable>
            </MudContainer>
        </Authorized>
        <NotAuthorized>
            <RedirectToLogin/>
        </NotAuthorized>
    </AuthorizeView>


    @code {
    private const string USER_NOT_FOUND = "Current user not found";
    private const string USERID_NOT_FOUND = "Couldnt get current user Id";
    private List<UserViewModel> users = new();
    private HashSet<UserViewModel> selectedItems = new();
    private bool _selectOnRowClick = true;
    private bool isTableLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isTableLoading = true;
            users = await AccountService.GetAllUsers()??new();
            isTableLoading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    protected async Task DeleteSelected()
    {
        isTableLoading = true;
        string? currentUserId = await GetUserId();
        if (currentUserId!=null)
        {
            IEnumerable<string>? result = await AccountService.DeleteUsers(selectedItems);
            if (result==null)
            {
                isTableLoading = false;
                return;
            }
            users = users.Where(x => !result.Contains(x.Id)).ToList();
            if (result.Contains(currentUserId))
                Logout();
        }
        isTableLoading = false;
    }

    protected async Task BlockSelected()
    {
        isTableLoading = true;
        await AccountService.SetBlock(selectedItems);
        string? currentUserId = await GetUserId();
        if (currentUserId==null)
        {
            ShowError(USERID_NOT_FOUND);
            isTableLoading = false;
            return;
        }
        var foundUser = FindUserById(currentUserId);
        if (foundUser == null)
        {
            ShowError(USER_NOT_FOUND);
            isTableLoading = false;
            return;
        }
        bool isBlocked = foundUser.IsBlocked;

        if (isBlocked==true)
            Logout();
        isTableLoading = false;
    }
    protected async Task UnblockSelected()
    {
        isTableLoading = true;
        await AccountService.SetBlock(selectedItems, false);
        isTableLoading = false;
    }

    private void Logout()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }


    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsIdentity? identity = (ClaimsIdentity?)authState.User.Identity;
        if (identity == null) return null;
        string? result = identity.Claims.Where(c => c.Type == "sub").Select(c => c.Value).SingleOrDefault();
        return result;

    }
    private UserViewModel? FindUserById(string id)
    {
        return users.SingleOrDefault(x => x.Id == id);

    }

    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error);

    }

}
